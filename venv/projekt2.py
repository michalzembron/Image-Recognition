# -*- coding: utf-8 -*-
"""Projekt2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ftWrhyoFAPDJcSDBJYNN6Jjbf1zpGQvl
"""

#Wstepna konfiguracja

from PIL import Image
import numpy as np
import cv2
import matplotlib.pyplot as plt
import os
import glob
from google.colab import drive

drive.mount('/content/drive')

#Wczytywanie wszystkich plików z folderu
allTifs = glob.glob("drive/My Drive/Colab Notebooks/Projekt/ROIS/*.tif")
allPng = glob.glob("drive/My Drive/Colab Notebooks/Projekt/ROIS/*.png")

print(allTifs)
print(allPng)

if (len(allTifs) == len(allPng)):
  print("Ilość plików .tif jest równa ilości plików etykiet w .png.\n")
  for wybranyPlik in range(len(allTifs)):
    print("Obecnie przetwarzam: " + allTifs[wybranyPlik])
    nazwaPliku = allTifs[wybranyPlik].split('ROIS/')[1]
    nazwaPliku = nazwaPliku.split('.tif')[0]
    #tworzenieMaski(allTifs[wybranyPlik], allTifs[wybranyPlik], nazwaPliku)
    print(nazwaPliku)
    newFolder = "drive/My Drive/Colab Notebooks/Projekt/Dataset/Datasets/"
    try:
      os.mkdir(newFolder)
    except OSError:
      print ("Błąd podczas tworzenia folderu: " + newFolder + ", prawdopodobnie już istnieje.\n")
    else:
      print ("Folder " + newFolder + " został utworzony pomyślnie.\n")
else:
  print("BŁĄD ! Ilość plików .tif NIE jest równa ilości plików etykiet w .png.")

def crop(height, width, nazwaPliku):
  k=1

  #Wczytujemy obraz oryginalny i konwertujemy do odcieni szarości
  originalImage = cv2.imread('drive/My Drive/Colab Notebooks/Projekt/ROIS/' + nazwaPliku + '.tif', 0)
  #Wykonujemy na obrazie progowanie metodą Otsu
  ret2,imageOtsu = cv2.threshold(originalImage ,0,255,cv2.THRESH_BINARY+cv2.THRESH_OTSU)
  #Odwracanie barw tak żeby jądra komórkowe były koloru białego a tło czarne
  originalImageInvert = np.asarray(imageOtsu, dtype="uint8")
  originalImageInvert = np.invert(originalImageInvert)
  originalImageInvert = Image.fromarray(np.uint8(originalImageInvert))

  #Jeszcze raz wczytujemy obraz oryginalny, żeby był otwarty biblioteką Image
  originalImage = Image.open('drive/My Drive/Colab Notebooks/Projekt/ROIS/' + nazwaPliku + '.tif')

  inputWidth, inputHeight = originalImageInvert.size
  for i in range(0,inputHeight,height):
    for j in range(0,inputWidth,width):
      box = (j, i, j+(width*2), i+(height*2))
      if (j+(width*2) > inputWidth and i+(height*2) < inputHeight):
        box = (inputWidth-256, i, inputWidth, i+(height*2))
        grayImage = originalImageInvert.crop(box)
        colorImage = originalImage.crop(box)
      elif (i+(height*2) > inputHeight and j+(width*2) < inputWidth):
        box = (j, inputHeight-256, j+(width*2), inputHeight)
        grayImage = originalImageInvert.crop(box)
        colorImage = originalImage.crop(box)
      elif (i+(height*2) > inputHeight and j+(width*2) > inputWidth):
        box = (inputWidth-256, inputHeight-256, inputWidth, inputHeight)
        grayImage = originalImageInvert.crop(box)
        colorImage = originalImage.crop(box)
      else:
        grayImage = originalImageInvert.crop(box)
        colorImage = originalImage.crop(box)
      #print(box)
      sum =0;
      for w in range(0,256):
        for h in range(0,256):
            if (grayImage.getpixel((w,h))>0):
              sum=sum+1
      if((sum/(256*256))>=(0.5)):
        labelImage = Image.open('drive/My Drive/Colab Notebooks/Projekt/ROIS/' + nazwaPliku + '_labels.png')
        labelImage = labelImage.crop(box)
        labelImage.save(newFolder + "Train/256/Labels/" + nazwaPliku + "(" + str(box[0]) + "x" + str(box[1]) + ')_labels.png')
        colorImage.save(newFolder + "Train/256/Images/" + nazwaPliku + "(" + str(box[0]) + "x" + str(box[1]) + ').png')
      print(str(k), end = ' ')
      k +=1
  return k-1

if (len(allTifs) == len(allPng)):
  print("Ilość plików .tif jest równa ilości plików etykiet w .png.")
  for wybranyPlik in range(len(allTifs)):
    print("Obecnie przetwarzam: " + allTifs[wybranyPlik])
    nazwaPliku = allTifs[wybranyPlik].split('ROIS/')[1]
    nazwaPliku = nazwaPliku.split('.tif')[0]
    print("Cropping Images...\nCurrently Cropped: ")
    k = crop(128, 128, nazwaPliku)
    print("\nDone.\nSaved " + str(k) + " cropped images to: \"" + newFolder + nazwaPliku + "/" + "\".\n") 
    #print(nazwaPliku)
else:
  print("BŁĄD ! Ilość plików .tif NIE jest równa ilości plików etykiet w .png.")